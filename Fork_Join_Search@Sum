package search;

import java.util.Random;
import java.util.concurrent.ForkJoinPool;

public class Driver {

	private static void shuffleArray(Integer[] array){
	    int index, temp;
	    Random random = new Random();
	    for (int i = array.length - 1; i > 0; i--)
	    {
	        index = random.nextInt(i + 1);
	        temp = array[index];
	        array[index] = array[i];
	        array[i] = temp;
	    }
	}
	
	
	public static void main(String[] args) {
		int N = 100;
		Integer[] buffer = new Integer[N];
		for(int i = 0; i < N; i++) {
			buffer[i] = i + 1;
		}
		shuffleArray(buffer);
		int target = 59;
		
		// used to speed up one big task, and divide and conquer as small tasks
		ForkJoinPool forkJoinPool = new ForkJoinPool(10);
		// give a new task
		forkJoinPool.invoke(new Searcher(buffer,0, buffer.length, target));
	}

}

----------------------------------------------------------------------
package search;

import java.util.concurrent.RecursiveAction;

public class Searcher extends RecursiveAction{
	
	private static final long serialVersionUID = 1L;
	private Integer[] buffer; 
	private int start;
	private int end;
	private int target;
	
	public Searcher(Integer[] buffer, int s, int e, int f) {
		this.buffer = buffer;
		this.start = s;
		this.end = e;
		this.target = f;
	}
	
	@Override
	protected void compute() {
		if(end - start <= 25) {    // Threshold set to 25
			//synchronized(this) {
				StringBuffer bf = new StringBuffer();
				bf.append(Thread.currentThread().getName());
				bf.append("\n");
				for(int i = start; i < end; i++) {
					bf.append(buffer[i]+",");
					if(buffer[i] == target) bf.append("---found---");
					
				}
				System.out.println(bf.toString());
			//}
		}else {
			int mid = (start + end) /2;
		    Searcher left = new Searcher(buffer, start, mid,target);
		    Searcher right = new Searcher(buffer, mid, end,target);
		    left.fork();
		    //right.fork();
            right.compute();
            left.join();
            //right.join();
		}
	}
}

=====================================================================================================
=====================================================================================================
=====================================================================================================
package sum;

import java.util.concurrent.RecursiveTask;

public class ForkJoinSum extends RecursiveTask<Long> {

	
	private Integer[] buffer; 
	private int start;
	private int end;
	public ForkJoinSum(Integer[] buffer, int s, int e) {
		this.buffer = buffer;
		this.start = s;
		this.end = e;
	}
	
	@Override
	protected Long compute() {
		StringBuffer bf = new StringBuffer();
		bf.append(Thread.currentThread().getName() + "\tsize:" + (end - start) + "\t");
		
		for(int i = start; i < end; i++) {	
			bf.append(buffer[i]);
				bf.append(",");
		}	
		System.out.println(bf.toString());
		
		if(buffer[start] > 6 ) { 
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if(buffer[start] == 1  && (end-start <= 1)) {
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		long sum = 0;
		bf = new StringBuffer();
		if(end - start <= 2) {
			for(int i = start; i < end; i++) {
				sum += buffer[i];
				bf.append(buffer[i]);
				bf.append(",");
			}
			System.out.println(Thread.currentThread().getName() + "\t:" + bf.toString() + "\tsum=" + sum);
			return sum;
		}else {
			int m = (start + end) /  2;
			ForkJoinSum left = new ForkJoinSum(buffer, start, m);
			ForkJoinSum right = new ForkJoinSum(buffer, m, end);
			left.fork();
			
			long s = right.compute() + left.join();
			return s;
		}
		
	}	
}


package completionservice;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.CompletionService;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class CompletionServiceTest {

    private static final int waittime = 200;
    private static final int numberOfThreadsInThePool = 3;

    private final List<String> printRequests = Arrays.asList(
    		            "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
                    );

    void normalLoop() {
            for (String image : printRequests) {
                    try {
                            Thread.sleep(waittime);
                    } catch (InterruptedException e) {
                            e.printStackTrace();
                    }
                    System.out.print(image);
            }
    }

    void normalExecutorService() {
            ExecutorService executor = Executors.newFixedThreadPool(numberOfThreadsInThePool);
            try {
                    Set<Future<String>> printTaskFutures = new HashSet<Future<String>>();
                    for (final String printRequest : printRequests) {
                            printTaskFutures.add(executor.submit(new Printer(printRequest)));
                    }
                    for (Future<String> future : printTaskFutures) {
                            System.out.print(future.get());

                    }
            } catch (Exception e) {
                    Thread.currentThread().interrupt();
            } finally {
                    if (executor != null) {
                            executor.shutdownNow();
                    }
            }
    }

    void completionService() {
            ExecutorService executor = Executors.newFixedThreadPool(numberOfThreadsInThePool);
            CompletionService<String> completionService = new ExecutorCompletionService<String>(executor);
            for (final String printRequest : printRequests) {
                    completionService.submit(new Printer(printRequest));
            }
            try {
                    for (int t = 0, n = printRequests.size(); t < n; t++) {
                            Future<String> f = completionService.take();
                            System.out.print(f.get());
                    }
            } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
            } catch (ExecutionException e) {
                    Thread.currentThread().interrupt();
            } finally {
                    if (executor != null) {
                            executor.shutdownNow();
                    }
            }

    }

    private class Printer implements Callable<String> {

            private final String toPrint;

            public Printer(String toPrint) {
                    this.toPrint = toPrint;
            }

            public String call() {
                    try {
                            Thread.sleep(waittime);
                    } catch (InterruptedException e) {
                            e.printStackTrace();
                    }
                    return toPrint;
            }
    }

    public static void main(String[] args) {
            System.out.println("Normal Executor Service");
            long start = System.currentTimeMillis();
            new CompletionServiceTest().normalExecutorService();
            System.out.println();
            System.out.println("Execution time : " + (System.currentTimeMillis() - start));

            System.out.println("Completion Service");
            start = System.currentTimeMillis();
            new CompletionServiceTest().completionService();
            System.out.println();
            System.out.println("Execution time : " + (System.currentTimeMillis() - start));

            System.out.println("Normal Loop");
            start = System.currentTimeMillis();
            new CompletionServiceTest().normalLoop();
            System.out.println();
            System.out.println("Execution time : " + (System.currentTimeMillis() - start));

    }
}


// Output
Normal Executor Service
7694917181035103847835351035933245374361048461051948110428973511088917106151235982210761076938746857672262102241228575956610210479161841492110136574896399
Execution time : 9410
Completion Service
1234658971102534867911043257698101324567982110543678911024367598101234659871210534678910143257689103216548971102453867191023476589101324568971012453876910
Execution time : 9407
Normal Loop
1234567891012345678910123456789101234567891012345678910123456789101234567891012345678910123456789101234567891012345678910123456789101234567891012345678910
Execution time : 28017
